#!/usr/bin/env ruby
# -*- mode: ruby -*-
$:.unshift(File.expand_path('../../lib',__FILE__))

#puts $LOAD_PATH

require "Hastie2"

module Hastie2
  module Executable
    HELP = <<-HELP
Usage: Local Copy hastie2 [COMMAND] <OPTIONS>

Hastie2 Commands:
  version - Print version number and exit
  help    - Print this help and exit

  create  - Create new report directory framework with given name
  watch   - Monitor current directory for changes.
            Updates local copy of report
  publish - Send report to server. Update published reports

  update  - Update local report directory with changes from report server
  config  - Create new hastie config file for communicating with server

  info    - Provide information about existing reports in sub-directories

  overview - Create a new overview page for documenting current status
  create_server - Create new server directory framework with given name

create options:
  Use 'hastie2 create -h' for more information on start options

publish options:
  Use 'hastie2 publish -h' for more information on publish options

update options:
  Use 'hastie2 update -h' for more information on publish options

config options:
  Use 'hastie2 config -h' for more information on publish options

create_server options:
  Use 'hastie2 create_server -h' for more information on publish options

    HELP

    def self.execute(command, args)
      case command
      when "version"
        require 'version'
        puts Hastie2::VERSION
      when "create", "start"
        Hastie2::ReportGenerator.start ARGV
      when "watch", "monitor"
        Hastie2::ReportWatcher.start ARGV
      when "publish"
        Hastie2::ReportPublisher.start ARGV
      when "update"
        Hastie2::ReportUpdater.start ARGV
      when "info"
        Hastie2::Info.start ARGV
      when "config"
        Hastie2::ConfigGenerator.start ARGV
      when "create_server","server_start"
        Hastie2::ServerGenerator.start ARGV
      when "overview"
        id = Time.now.strftime('%b_%Y')
        options = ["--template","overview","--id", id, "--output", id, "--only_report", "--pi", "cbio", "--researcher", "cbio"]
        options.concat(ARGV)
        Hastie2::ReportGenerator.start options
      when "id"
        Hastie2::IdMaker.start ARGV
      else
        puts Hastie2::Executable::HELP
      end
    end
  end
end

command = ARGV.shift
Hastie2::Executable.execute command, ARGV
